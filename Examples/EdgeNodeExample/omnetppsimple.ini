[General]
sim-time-limit = 0.1s	# Simulation length (in simtime)
tkenv-plugin-path = ../../INET/Etc/plugins

**.result-recording-modes = all
#**.obs.vector-recording = true
#**.endToEndDelay**.vector-recording = true
#**.avgPacketTime.vector-recording = true
#**.sentBurstsSlowPath**.vector-recording = true
#**.sentBurstsFastPath**.vector-recording = true
#**.disassembler.**.vector-recording = true
**OXC**.vector-recording = true
**.vector-recording = false
**.scalar-recording = true


[Config SimpleNetwork]
#network = EdgeNodeExampleAuto
network = EdgeNodeExample
**.dataRate = 10Gbps 	#Optical channel data rate = 1Gb per lambda

**.dataRateFast = 10Gbps 	#Optical channel data rate = 1Gb per lambda

# Burstifier configuration (the same parameters for all)
#===================================================================
**.numPacketBurstifiers = 9

**edge**.timeout = uniform(1.1ms,1ms)#5us #2ms
**.packetBurstifier[*].maxSize = uniform(14MiB,15MiB)#40000000B
**.**.packetBurstifier[*].numPackets = 5

#**.**.packetBurstifier[*].timeout = 1ms#exponential(10us)


**.packetBurstifier[*].overflowLastPacket = true
**.packetBurstifier[*].cteHeader = 0B
**.packetBurstifier[*].varHeader = 1B
# Burst Sender configuration
#===============================
**.sender.BCPSize = 26B # BCP size
**edge1.**.sender.sourceAddress = "10.0.100.1"
**edge2.**.sender.sourceAddress = "10.0.100.2"
**edge3.**.sender.sourceAddress = "10.0.100.3"
**edge4.**.sender.sourceAddress = "10.0.100.4"
**.controllerAddress = "10.0.111.1"
**.fastSwitchAddress = "10.0.111.3"
**.slowSwitchAddress = "10.0.111.2"
   	 	
**.idleTime=5us
   		
**.sender.maxSchedBurstSize = 0 #maximum size (bits) of Sender's scheduled burst queue (0 = infinite queue)
**.sender.maxSchedBurstElems = 0 #maximum number of queued bursts (0 = infinite)
**.sender.testing = false # If true, the module doesn't try to register to Edge Node's interface table. Used for debugging purposes only

**.numberofracks=4

      
**.numChannelFastSwitch=5 
**.numChannelSlowSwitch=5 

**.switchTimeSlowSwitch=0.01s 
**.switchTimeFastSwitch=0.0001s
**.processingTime = 0.000001s
#**.processingTime = 0

**.arp.globalARP = true
**.arp.retryTimeout = 1s
**.arp.retryCount = 3
**.arp.cacheTimeout = 100s
**.queueType = "DropTailQueue" # in routers
**.queue.dataQueue.frameCapacity = 10000  # in routers

**.eth[*].mac.duplexMode = true
 
#Guard time

**.queue.frameCapacity = 10000

 
#Guard time
**.guardTime = 0.00001s
#**.guardTime = 0s
#Host application configuration
#==============================
# udp app (on)

**.numUdpApps = 1
**.mac.address = "auto"

**.udpApp[*].typename = "UDPBasicBurst"
**.udpApp[*].chooseDestAddrMode = "perSend"
**.udpApp[*].burstDuration = exponential(10ms)
**.udpApp[*].sleepDuration = exponential(2ms)
**.udpApp[*].startTime= 0s
#**.udpApp[*].typename = "UDPBasicApp"
#**.network1host*.udpApp[*].destAddresses = moduleListByPath("**.network{2..4}host*")


#**.network1host1.udpApp[*].destAddresses = simTime() > 0.1s ? moduleListByPath("**.network{4..4}host*") : moduleListByPath("**.network{3..3}host*")

**.timerForDestination = 1s

#**.network1host1.udpApp[*].destAddresses = simTime() < 0.5s ? moduleListByPath("**.network{4..4}host*") : moduleListByPath("**.network{2..3}host*")




**.network1host*.udpApp[*].destAddresses = moduleListByPath("**.network{4..4}host*")
#**.network2host*.udpApp[*].destAddresses = moduleListByPath("**.network1host*","**.network{3..4}host*")
#**.network3host*.udpApp[*].destAddresses = moduleListByPath("**.network{1..2}host*","**.network4host*")
**.network4host*.udpApp[*].destAddresses = moduleListByPath("**.network{1..1}host*")

**.maxmessageLength = 1500B
#**.*host*.udpApp[*].messageLength = 1400B#1400B #
#**.*host*.udpApp[*].messageLength = uniform(1300B,1400B)# #
**.*host*.udpApp[*].messageLength = 1465B
#**.*host*.udpApp[*].sendInterval = exponential(${interarrival = 1..10 step 1}us) #exponential(1us)#5us #
**.scheduler.timeout = 1ms
**.*host*.udpApp[*].localPort = 1000
**.*host*.udpApp[*].destPort = 1000

#**.sendInterval = exponential(${interarrival = 12,6,4,3,2.4,2,1.7,1.5,1.34,1.2}us) # # # exponential(1us)#5us #  #exponential(1us)#5us #
**.sendInterval = exponential(20us) # # # exponential(1us)#5us #  #exponential(1us)#5us #
#**.sendInterval = exponential(${interarrival = 1.2}us) # # # exponential(1us)#5us #  #exponential(1us)#5us #
#**.*host*.udpApp[*].sendInterval = exponential(1us) 


**.destAddresses=""



